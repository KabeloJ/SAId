@page "/"
@using System.Security.Claims
@using Core.AccountDetails.Application
@using Core.AccountDetails.Models
@inject AuthenticationStateProvider _provider
@inject IAccountDetailsServices _services
@inject NavigationManager _nav


<div class="m-4">
    @if (UserId != null)
    {
        @if (!AccountSet)
        {
            <div>
                <a href="/AccountDetails/Index" title="">Finish Setting Up Account</a>
            </div>
        }
    }
<div class="row">
    @if (Navigating)
    {
        <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" disabled>
            <h4 class="text-uppercase">Apply For Smart Id</h4>
        </button>
    }
    else
    {
        <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" @onclick="@(()=>Navigate("/Application/Start"))">
            <h4 class="text-uppercase">Apply For Smart Id</h4>
        </button>
    }
    @if (UserId != null && model != null)
    {
        @if (model.Role == "Admin")
        {
            @if (Navigating)
            {
                <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" disabled>
                    <h4 class="text-uppercase">View Applications</h4>
                </button>
            }
            else
            {
                <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" @onclick="@(()=>Navigate("/Application/Admin"))">
                    <h4 class="text-uppercase">View Applications</h4>
                </button>
            }
        }
        else
        {
            if (Navigating)
            {

                <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" disabled>
                    <h4 class="text-uppercase">View Applications History</h4>
                </button>
            }
            else
            {
                <button class="bg-secondary text-white p-4 m-2 col-md-5 btn" @onclick="@(()=>Navigate("/Application/History"))">
                    <h4 class="text-uppercase">View Applications History</h4>
                </button>
            }
        }
    }
</div>
</div>
@code{
    public string? UserId { get; set; }
    public bool AccountSet { get; set; }
    public AccountDetailsModel model { get; set; }

    #region
    bool Navigating { get; set; }
    async Task Wait()
    {
        await Task.Delay(200);
        this.StateHasChanged();
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        var auth = await _provider.GetAuthenticationStateAsync();
        UserId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        model = _services.Get(UserId);
        if (model != null)
        {
            AccountSet = true;
        }
    }
    async void Navigate(string to)
    {
        Navigating = true;
        await Wait();
        _nav.NavigateTo(to, true);
        Navigating = false;

    }
}